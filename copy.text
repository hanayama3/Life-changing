ja:
  activerecord:
  errors:
      messages:
        record_invalid: 'バリデーションに失敗しました: %{errors}'
        restrict_dependent_destroy:
          has_one: "%{record}が存在しているので削除できません"
          has_many: "%{record}が存在しているので削除できません"
  attributes:
    user:
      name: 名前
      email: メールアドレス
      password: パスワード
      password_confirmation: 確認用パスワード
      remember_me: ログイン状態を維持する
      image_id: 画像
    habit: 習慣
      task: タスク
      frequency: 回数
      content: 投稿
      private: 非公開
      current_password: 確認用パスワード
      
      パート２
      
      ja:
  activerecord:
    models:
      user: ユーザー
      habit: 習慣
      post: 投稿
      record: 記録
    attributes:
      user:
        email: メールアドレス
        password: パスワード
        profile: プロフィール
        name: 名前
        image_id: 画像
        level: レベル
        remember_me: ログインを記憶
        current_password: 現在のパスワード
      habit:
        task: 習慣
        frequency: 回数
        end_time: 終了時間
        complete: 達成
      post:
        content: 投稿文
        private: 非公開
        
        
        User.create!(
name:  "花山",
email: "hanayamabmw@icloud.com",
password: "hanayama",
profile: "花山薫です",
level: 100
)

Post.create!(
content: "プログラミング楽しい",
user_id: 1,
private: true
)

10.times do |n|
date = Date.current.ago(10.days)
Record.create!(
level: rand(10),
date: date.since(n.days),
user_id: 1
)
end

10.times do |n|
email = Faker::Internet.email
password = "password"
name = Faker::Name.name
level = 0
User.create!(
email: email,
password: password,
name: name,
level: level
)
end

# user_idがおかしい

10.times do |n|
 content = Faker::Lorem.sentence(word_count: 5)
 user_id = 1
 Post.create!(
 content: content,
 user_id: user_id
)
end

# 5.times do |n|
# task = ["勉強", "筋トレ", "瞑想", "断食", "ヨガ", "散歩","早寝早起き","片付け","日記","ランニング"]
# frequency = rand(1..7)
# complete = 0
# end_time = Time.current.since(1.days)
# user_id = n + 1
# Habit.create!(
# task: task.sample,
# frequency: frequency,
# complete: complete,
# end_time: end_time,
# user_id: user_id
# )
# end

# users = User.all
# user  = users.first
# following = users[2..8]
# followers = users[3..6]

# following.each { |followed| user.follow(followed) }
# followers.each { |follower| follower.follow(user) }